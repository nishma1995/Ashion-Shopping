<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Management</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <!-- Razorpay SDK -->
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
</head>

<body>

    {{>header}}
    <div class="container-fluid">
        <div class="row">

            <div class="col-md-3 bg-light d-flex flex-column align-items-start">
                {{>profilesidebar}}
                <div class="flex-grow-1"></div>
            </div>

            <!-- Main Content Area -->
            <div class="col-md-9 mt-5">


                <h2>Order Details</h2>
              
                {{#eq orderDetails.paymentStatus "paid" }}
               
                <div class="d-flex justify-content-end">
                       <a href="#" class="btn btn-primary downloadInvoiceBtn mb-3 " id="downloadInvoiceBtn" data-orderid="{{orderDetails._id}}">Invoice</a>
                </div>
                
                {{/eq}}
               
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>No</th>
                            <th>Product Name</th>
                            <th>Quantity</th>
                            <th>Color</th>
                            <th>Status</th>
                            <th>Payment Status</th>
                            {{!--<th>Product Price</th>--}}

                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{#each orderDetails.products}}
                        <tr>
                            <td>{{addOne @index}}</td>
                            <td>{{this.productId.name}}</td>
                            <td>

                                {{this.quantity}}

                            </td>
                            <td>{{this.color}}</td>

                            <td id="productStatus">{{this.productStatus}}</td>
                            <td id="paymentStatus">{{../orderDetails.paymentStatus}}</td>
                          {{!--  <td>{{this.productPrice}}</td>--}}

                            <td>
                                {{#eq ../orderDetails.paymentStatus "failed"}}
                                {{#eq productStatus "Cancelled"}}

                                {{else}}

                               {{!-- <a href="#" class="btn btn-primary retryPaymentBtn"data-orderid="{{../orderDetails._id}}"
                                    data-productid="{{this.productId._id}}">
                                    Retry Payment
                                </a>--}}
                                {{/eq}}
                                {{/eq}}

                                {{#eq productStatus "Delivered"}}
                                 
                                <a href="#" class="btn btn-success returnBtn" data-orderid="{{../orderDetails._id}}"
                                    data-productid="{{this.productId._id}}">
                                    Return
                                </a>
                                {{else}}
                                {{#eq productStatus "Cancelled"}}
                                

                                {{else}}
                                <a href="#" class="btn btn-danger cancelBtn" data-orderid="{{../orderDetails._id}}"
                                    data-productid="{{this.productId._id}}">
                                    Cancel
                                </a>
                                {{/eq}}
                                {{/eq}}

                            </td>
                        </tr>
                        {{/each}}

                    </tbody>
                </table>
                  <div class="mt-3">
                   {{#eq orderDetails.paymentStatus "failed"}}
                    {{#each orderDetails.products}}
                    {{#eq productStatus "Cancelled"}}

                                {{else}}
                                  {{#if @first}}
                
                <a href="#" class="btn btn-primary retryPaymentBtn" data-orderid="{{../orderDetails._id}}">
                    Retry Payment
                </a>
                {{/if}}
            </div>
              {{/eq}}
                              

            {{/each}}
            {{/eq}}
            
              
            

            </div>
          
           

        </div>
    </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>


    <!-- Modal Structure -->
    <div class="modal fade" id="returnModal" tabindex="-1" aria-labelledby="returnModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="returnModalLabel">Enter Return Reason</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="returnForm">
                        <div class="mb-3">
                            <label for="returnReason" class="form-label">Return Reason:</label>
                            <input type="text" class="form-control" id="returnReason" name="returnReason">
                        </div>
                        <button type="submit" class="btn btn-primary">Submit Return</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <script>
        $(document).ready(function () {

 



            const productStatus = document.getElementById('productStatus').textContent;
            const paymentStatus = document.getElementById('paymentStatus').textContent;
            const retryPaymentBtns=document.querySelectorAll ('.retryPaymentBtn')
             const cancelBtns=document.querySelectorAll ('.cancelBtn')
            if ((productStatus === "requested for return" && paymentStatus === "failed") ||productStatus=="Returned") {
                retryPaymentBtns.forEach(btn => {
            btn.style.display = 'none'; // Hide retryPaymentBtns
        });

        cancelBtns.forEach(btn => {
            btn.style.display = 'none'; // Hide cancelBtns
        });
            }

            if (paymentStatus === "failed") {
    cancelBtns.forEach(btn => {
        btn.style.display = 'none';
    });
}

            


            $('.cancelBtn').click(function () {

                const orderId = $(this).data('orderid');
                const productId = $(this).data('productid');
                console.log('Order ID:', orderId);
                console.log('Product IDs:', productId);
                Swal.fire({
                    title: 'Are you sure?',
                    text: "Once canceled, you cannot undo this action!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Yes'
                })



                    .then((result) => {
                        if (result.isConfirmed) {



                            console.log('Order ID:', orderId);
                            console.log('Product IDs:', productId);

                            // Example: Submit form via AJAX
                            $.ajax({
                                url: '/cancelOrder',
                                method: 'POST',
                                data: { orderId: orderId, productIds: productId },
                                success: function (response) {
                                    {
                                        Swal.fire({
                                            icon: 'success',
                                            title: 'Success',
                                            text: response.message,
                                            timer: 4000, // Duration in milliseconds
                                            toast: true,
                                            position: 'top', // Toast position
                                            showConfirmButton: false // Hide confirmation button
                                        });
                                    }


                                    setTimeout(function () {
                                        window.location.href = `/orderDetails/${orderId}`;
                                    }, 4000)

                                    // Redirect upon successful cancel--}}
                                },
                                error: function (xhr, status, error) {
                                    console.error(error); // Handle error
                                    alert("err")
                                }
                            });
                        }
                    })
            })
            let productIdsForReturn = [];
            let orderId
            $('.returnBtn').click(function () {
                orderId = $(this).data('orderid');
                productIdsForReturn = $(this).data('productid');
                console.log('Order ID:', orderId);
                console.log('Product IDs:', productIdsForReturn);
                $('#returnModal').modal('show');
            })
            $('#returnForm').submit(function (event) {
                event.preventDefault();
                //const orderId = $(this).closest('.card').find('input[name="orderId"]').val();
                const returnReason = $('#returnReason').val().trim();
                console.log('Order ID:', orderId);
                console.log('Product IDs:', productIdsForReturn);

                if (!returnReason) {
                    alert('Please enter return reason');
                    return;
                }


                Swal.fire({
                    title: 'Are you sure?',
                    text: "Do you want to return!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Yes'
                })



                    .then((result) => {
                        if (result.isConfirmed) {






                            // Perform AJAX request for return
                            $.ajax({
                                url: '/returnOrder',
                                method: 'POST',
                                data: { orderId: orderId, returnReason: returnReason, productIds: productIdsForReturn },
                                success: function (response) {
                                    $('#returnModal').modal('hide');
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Success',
                                        text: 'Return request submitted successfully',
                                        timer: 3000,
                                        showConfirmButton: false
                                    });

                                    setTimeout(function () {
                                        // Redirect to the specified URL after the delay
                                        window.location.href = `/orderDetails/${orderId}`;
                                    }, 3000);
                                },
                                error: function (xhr, status, error) {
                                    console.error(error);
                                    alert('Failed to submit return request');
                                }
                            });
                        }
                    })
            })

         const orderDetails = {{{ orderDetailsJSON }}}
       
        const retryPaymentBtn = $('.retryPaymentBtn');
        console.log(orderDetails);
        

        retryPaymentBtn.on('click', async function () {
            const orderIdToRetry = $(this).data('orderid'); // Assuming data-orderid attribute is set on the button
            console.log(orderIdToRetry+"dhsuydgydu")

        // Find the order in orderDetails array that matches the orderIdToRetry
        const orderToRetry = orderDetails.find(order => order._id === orderIdToRetry);
        console.log("dsads"+orderToRetry)
            try {
                // Fetch endpoint to create Razorpay order
                const response = await fetch('/createRazorpayOrder', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        amount: orderToRetry.amount
                    }),
                });
                const data = await response.json();

                if (data && data.orderId) {
                    const orderId = data.orderId;
                    const razorpayKey = data.key;

                    const options = {
                        key: razorpayKey, // Your Razorpay Key
                        amount: data.amount * 100, // Amount in paisa
                        currency: 'INR',
                        order_id: orderId,
                        handler: function (response) {
                            if (response.razorpay_payment_id) {
                                const productIdsArray = orderToRetry.productIds;
                                const selectedAddressId = orderToRetry.addressId;
                                const paymentmethod = orderToRetry.paymentMethod;
                                const totalAmountInput = orderToRetry.amount;
                                const couponIdInput = orderToRetry.couponId;

                                // Send order details in the request body
                                fetch('/placeOrderFailure', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                    },
                                    body: JSON.stringify({ selectedAddressId, paymentmethod, productIds: productIdsArray.join(','), totalAmountInput, couponIdInput,orderIdToRetry }), // Send order details as JSON
                                })
                                    .then(response => response.json())
                                    .then(data => {
                                        console.log('Response:', data);
                                        window.location.href = '/orderSuccess';
                                    })
                                    .catch(error => {
                                        console.error('Error:', error);
                                    });
                            } else {
                                console.error('Payment failed:', response.error);
                                // Optionally, redirect to failure page or show an error message
                            }
                        },
                        prefill: {
                            // Add customer details if needed
                        },
                        notes: {
                            // Add notes if needed
                        },
                    };
                    const rzp = new Razorpay(options);
                    rzp.on('payment.failed', function (response) {
                        console.error('Payment failed:', response.error);

                        console.log('Failure data:', orderDetails);

                        fetch('/orderFailure', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ failureData: orderDetails }),
                        })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    console.log("ppppp");
                                    window.location.href = `/orderFailurePage/${orderIdToRetry}`;
                                } else {
                                    console.error('Failed to process order failure:', data.message);
                                }
                            })
                            .catch(error => {
                                console.error('Error processing order failure:', error.message);
                            });
                    });
                    rzp.open(); // Open Razorpay payment modal
                }
            } catch (error) {
                console.error('Error creating Razorpay order:', error);
            }
        });
     $('.downloadInvoiceBtn').click(async function(){
    const orderIdInvoice = $(this).data('orderid');

    try {
        const response = await fetch(`/download-invoice/${orderIdInvoice}`);
        if (!response.ok) {
            throw new Error('Error downloading invoice');
        }

        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'invoice.pdf';
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
    } catch (error) {
        console.error('Error downloading invoice:', error.message);
        alert('Error downloading invoice');
    }
});

        


        })


    </script>
</body>

</html>